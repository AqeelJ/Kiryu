import java.util.LinkedList;
import java.util.Queue;
import java.util.List;
import java.util.PriorityQueue;

public class Queue1 
{
	private static final String LINE = "\n" + "*".repeat(72) + "\n";
	
	private final Queue<CustomerInformation> thirdCounter = new PriorityQueue<>();
	private final Queue<CustomerInformation> firstCounter = new PriorityQueue<>();
	private final Queue<CustomerInformation> secondCounter = new PriorityQueue<>();
	
	//normal constructor
	public List<Queue<CustomerInformation>> queues = List.of(thirdCounter, firstCounter, secondCounter);
	
	
	
	
	  private Queue<CustomerInformation> currentExpressCounter = secondCounter;

	    public Queue<CustomerInformation> nextExpressCounter() {
	        if (currentExpressCounter.equals(thirdCounter))
	            currentExpressCounter = secondCounter;
	        else
	            currentExpressCounter = thirdCounter;
	        
	        return currentExpressCounter;

	    }

	    public int counterNumber(Queue<CustomerInformation> counter) {
	        if (counter.equals(firstCounter)) return 1;
	        else if (counter.equals(secondCounter)) return 2;
	        else if (counter.equals(thirdCounter)) return 3;
	        return 0;
	    }

	    public void addToPrimary(CustomerInformation customer) {
	        customer.setcounterPaid(counterNumber(thirdCounter));
	        thirdCounter.add(customer);
	    }

	    public void addToExpress(CustomerInformation customer) {
	        nextExpressCounter().add(customer);
	        customer.setcounterPaid(counterNumber(currentExpressCounter));
	    }
	    	//Counter Status
	    public void queuesStatus() {
	        System.out.println("Counter 1 Queue: " +firstCounter.toString() 
	            + "\nCounter 2 Queue: " + secondCounter.toString() 
	            + "\nCounter 3 Queue: " + thirdCounter.toString());
	        
	    }
	    public String queuesStatusCounter1() {
	        return ("Counter 1 Queue: " + firstCounter.toString());
	    }
	    public String queuesStatusCounter2() {
	        return ("Counter 2 Queue: " + secondCounter.toString());
	    }
	    public String queuesStatusCounter3() {
	        return ("Counter 3 Queue: " + thirdCounter.toString());
	    }

	    public static void flush(Queue<CustomerInformation> queue) {
	        CustomerInformation customer = queue.poll();

	        while (customer != null) {
	            System.out.print(LINE +"Customer Name"+customer.getcustName()+ "Customer Id: " + customer.toString() +"\nCustomer IC: " + customer.getcustIC() +
	            		"\nCounter Paid: " + customer.getcounterPaid() + "\n\n" + customer.getItem().toString() + LINE);
	            customer = queue.poll();
	        }
	    }
	}
	
	



